rules = [
  Disable
  DisableSyntax
  LeakingImplicitClassVal
  MissingFinal
  NoAutoTupling
  NoValInForComprehension
  ProcedureSyntax
  OrganizeImports
  NoInfer
]
OrganizeImports.groupedImports = Explode
OrganizeImports.groups = [
  "java",
  "scala.",
  "derevo.",
  "cats.",
  "zio.",
  "tofu.",
  "io.",
  "io.circe",
  "derevo.",
  "cats.effect.",
  "fs2.",
  "sttp.",
  "org.http4s.",
  "doobie.",
  "monix.",
  "com.tochka."
]

Disable.symbols = [
  {
    regex = "^\\Qscala/collection/mutable\\E.*$"
    message = "Java collections have better performance, which is what I assume you were trying to do"
  }
  {
    regex = "^\\Qscala/collection/parallel\\E.*$"
    message = "parallel collections are low performance and block the thread, prefer cats.Parallel"
  }
  {
    regex = {
      includes = [
        "^\\Qjava/io\\E.*$"
        "^\\Qscala/io/Source\\E.*$"
      ]
    }
    message = "legacy blocking API, prefer java.nio"
  }
  {
    regex = "^\\Qjava/net/URL#\\E.*$"
    message = "URL talks to the network for equality, prefer URI"
  }
  {
    regex = {
      includes = [
        # overrides not fully implemented: https://github.com/scalacenter/scalafix/pull/634
        #"^.*\\Q#equals().\\E$"
        "^.*\\Q#hashCode().\\E$"
        # "^.*\\Q#toString().\\E$" # doesn't catch string interpolators...
        # more to add here...
      ]
    }
    message = "prefer cats.{Eq, Show, etc}"
  }

  {
    symbol = "scala/Enumeration"
    message = "prefer an ADT with sealed trait or Enumeratum"
  }

  {
    regex = {
      includes = [
        "^\\Qscala/util/Either.LeftProjection#get().\\E$"
        "^\\Qscala/util/Either.RightProjection#get().\\E$"
        "^\\Qscala/util/Try#get().\\E$"
        "^\\Qscala/Option#get().\\E$"
        "^\\Qscala/collection/IterableLike#head().\\E$"
      ]
    }
    message = "not a total function"
  }
]

Disable.ifSynthetic = [
  "java/io/Serializable"

  # local type inference + covariant types fires this
  # "scala/Nothing"

  # when upstream broke noImplicitConversion and we don't agree that their
  # implicits are worth the mental burden.
  "scala/Option.option2Iterable"
  "scala/Predef.any2stringadd"

  {
    regex = {
      includes = [
        "^\\Qscala/collection/MapLike#apply().\\E$"
        "^\\Qscala/collection/LinearSeqOptimized#apply().\\E$"
      ]
    }
    message = "not a total function"
  }
]

DisableSyntax {
  noAsInstanceOf = true
  noContravariantTypes = true
  noCovariantTypes = false
  noDefaultArgs = false
  noFinalVal = false
  noFinalize = true
  noImplicitConversion = true
  noImplicitObject = true
  noIsInstanceOf = true
  noNulls = true
  noReturns = true
  noSemicolons = true
  noTabs = true
  noThrows = true
  noUniversalEquality = false
  noValInAbstract = false
  noValPatterns = true
  noVars = true
  noWhileLoops = true
  noXml = true
}
